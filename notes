Validaçõe:
  Notificações (Biblioteca:flunt)=> é uma forma de trocar mensagens entre as classes, então essa classe vai notificar outra parte do codigo através das notificações;
  Identity (Biblioteca: identity.EntityFrameworkCore)=> è um sistema de associação que permite adicionar funcionalidades de login e permissionamento ao seu aplicativo, e pode usar também provedores (google,facebook,twitter);
  Claim => usadas para fornecer informações adicionar para os usuario authenticado;
  Dapper => Micro ORM porque tem menos funcionalidade e é mais leve;
  Dapper efCore => normalmente você alia efCore para coisas gerais, e para coisas que vc precisa de peformace ultiliza o Dapper;
  SSO => Em resumo, (SSO) é uma solução que permite aos usuários fazer login em várias aplicações ou sistemas com um único conjunto de credenciais, simplificando o processo de autenticação e melhorando a experiência do usuário.
  OAuth => protocolo de (autorização e não de autenticação) que permite os usuarios ter acesso aweb site sem precisar expor suas crendnciais.
        pq usar => Não necessita armazenar as credenciais dos usuarios para acesso futuro, não precisa utilizar autenticação de login e senha, nãon tera acesso ilimitado a conta do usuario



Install : image SQLserver => sudo docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=@Sql1234" -p 1433:1433 --name sqlserve --hostname sql1 -d  mcr.microsoft.com/mssql/server:2022-latest;


pacotes para que a aplicaçã possa ultilizar o framwork core:
	.dotnet add package Microsoft.EntityFrameworkCore
	.dotnet add package Microsoft.EntityFrameworkCore.Design --migrations
	..dotnet add package Microsoft.EntityFrameworkCore.SqlServer
	

// migrations: Arquivos em c# que escreve em sql= cria as tabelas;
	dotnet tool –global dotnet-ef
cirado um migration : dotnet ef migrations add <nome>
aplicar o migrate : dotnet ef database update

SQL:
	SELECT * from [dbo].[__EFMigrationsHistory]

atualizar todos seus pacotes :
	dotnet tool install –global dotnet-outdated-tool
	dotnet outdated –upgrade

RECORD:
	proteje as entitys criando representações

TOKEN: 
  nunca deve deixar no localStorage e sim na memoria do browser porque ai ninguem consegue consultar esse token
  dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer;
  
  [Authorize]
  [AlowAnonymous]

POLICES:
  Politicas de seguranças que a gente define, você define qual e a regra que você deseja usar para que determinados endpoints devem estar dentro dessa regra quando
usuarios forem authenticados;

CPU CORE:
  (Núcleo de Processamento): Pense no CPU Core como uma pequena "máquina" dentro do processador do seu computador que executa tarefas. Se você tiver vários núcleos, é como se tivesse várias dessas "máquinas" trabalhando juntas para fazer as coisas mais rapidamente.

THREAD:
   Uma thread é como uma linha de tarefas que o processador pode executar. Pense em uma lista de tarefas que você precisa fazer, e cada item da lista é uma thread. Com várias threads, o processador pode trabalhar em diferentes tarefas ao mesmo tempo, dividindo o trabalho entre elas.

PROCESSO:
  Um processo é como um programa em execução. Imagine que você tem vários aplicativos abertos no seu computador, cada um deles é um processo separado. Cada processo tem suas próprias tarefas para executar e usa recursos (como memória) para fazer isso.

  Resumindo, um CPU Core é uma "máquina" dentro do processador que executa tarefas, uma thread é uma linha de tarefas que o processador pode executar, e um processo é um programa em execução com suas próprias tarefas. Ter vários núcleos e threads permite que o computador execute várias tarefas ao mesmo tempo e de forma mais eficiente.


BLOCK TASK:
  Acontece quando vc tem um processo Syncrono quando uma tarefa fica parada ou bloqueada aguardando a conclusão de alguma operação externa;

PROCESS ASYNC:
  Em vez de executar uma tarefa por vez em ordem sequencial, os processos assíncronos permitem que várias tarefas sejam iniciadas simultaneamente e executadas em paralelo
  todo processo asynchrono ele retorna uma tarefa uma task